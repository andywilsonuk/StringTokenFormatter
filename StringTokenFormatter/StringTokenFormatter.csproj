<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks Condition="'$(LibraryFrameworks)'==''">net40;netstandard2.0</TargetFrameworks>
	<TargetFrameworks Condition="'$(LibraryFrameworks)'!=''">$(LibraryFrameworks)</TargetFrameworks>
	<Title>StringTokenFormatter</Title>
    <AssemblyName>StringTokenFormatter</AssemblyName>
    <RootNamespace>StringTokenFormatter</RootNamespace>
    <PackageReleaseNotes>2.0.6
- Changed DefaultTokenMatcher.MatchedTokens to return just the token name 
2.0.5
- DefaultTokenMatcher class now includes a method that returns the token found within a string
2.0.4
- Assembly is now signed
2.0.3
- Relative URLs are now supported
2.0.2
- Reordered constructor parameters of TokenReplacer to match workflow
2.0.1
- Added Uri extension methods (FormatToken)
- MapTokens method is now public to allow for further customisation
2.0.0
- Reworked pipeline so that each step (match, value lookup, value format) is configurable via an interface
- Removed FormatPreview as we are no longer building a complete input for string.format
- IFormatProvider is now passed via constructor
- String.FormatToken interface renames the same so compatibility should be retained
- Added mappings for Func&lt;string&gt; and Func&lt;object&gt; whereby the token isn't passed as an input
- Mapping should now be consistent between all the different format methods
1.7.0
- Added .net Standard 2.0 implementation
1.6.1
- Fixed issue whereby orphan starting tokens were stopping actual tokens from being matched
1.6.0
- Alternative token markers can now used     
1.5.1
- Bug fix on empty string when calling Format method
1.5.0
- Added support for Lazy&amp;lt;string, object&amp;gt;, Lazy&amp;lt;string, string&amp;gt;, Func&amp;lt;string, string&amp;gt;
- Added format preview (to show the string.Format pattern rather than the result)
1.4.0
- Added support for Func&amp;lt;string, object&amp;gt; as token value to support on-demand lookups
1.3.0
- Added specific extension methods for IDictionary&amp;lt;string, string&amp;gt;
1.2.0
- Added support for alignment padding
1.1.0
- Updated to use string.format internally so that non-string value types can be formatted (e.g. {token:D4})
- Allowed format provider to be specified
- Provided overload to allow for anonymous objects to be used
1.0.0
- Initial version.</PackageReleaseNotes>
    <Version>2.0.6</Version>
	<AssemblyVersion>2.0.6</AssemblyVersion>
	<FileVersion>2.0.6</FileVersion>
    <Product>String Token Formatter</Product>
    <Authors>Andy Wilson</Authors>
    <Company>Andy Wilson</Company>
    <Description>Provides string extension methods for replacing tokens within strings (using the format '{name}') with their specified lookup value.</Description>
	<Summary>Provides string extension methods for replacing tokens within strings (using the format '{name}') with their specified lookup value.</Summary>
    <Copyright>Andy Wilson</Copyright>
    <PackageLicenseUrl>http://opensource.org/licenses/Apache-2.0</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/andywilsonuk/StringTokenFormatter</PackageProjectUrl>
    <RepositoryUrl>https://github.com/andywilsonuk/StringTokenFormatter</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageTags>string token formatter replace extension</PackageTags>
	<NetStandardImplicitPackageVersion>2.0.0</NetStandardImplicitPackageVersion>
	<MinClientVersion>2.12</MinClientVersion>
	<SignAssembly>true</SignAssembly>
	<AssemblyOriginatorKeyFile>StringTokenFormatter.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>  
  <PropertyGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
    <AssemblyTitle>String Token Formatter .NET Standard 2.0</AssemblyTitle>
  </PropertyGroup>
  <PropertyGroup Condition="'$(TargetFramework)'=='net40'">
    <AssemblyTitle>String Token Formatter .NET 4.0</AssemblyTitle>
  </PropertyGroup>
</Project>
